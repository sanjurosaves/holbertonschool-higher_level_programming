	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

The function demands two arguments.

::

	>>> matrix_divided([2,4])
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

The matrix must be a list of lists.

::

	>>> matrix_divided([2,4], 1)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

The matrix must be a list of integers or floats.

::

	>>> matrix_divided([[2, 3],['a',4]], 1)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Each row of the matrix must be of the same size.

::

	>>> matrix_divided([[2],[3,1]], 1)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size
	>>> matrix_divided([[2],[2],[3,1]], 1)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size
	>>> matrix_divided([[2],[4],[4],[6],[3,1]], 1)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

div must be a number (int or float).

::

	>>> matrix_divided([[2,2],[3,3]], 'b')
	Traceback (most recent call last):
	TypeError: div must be a number

div cannot be zero.

::

	>>> matrix_divided([[2,2],[3,3]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

division by infinity

::

	>>> matrix_divided([[2,2],[3,3]], float('inf'))
	[[0.0, 0.0], [0.0, 0.0]]

Each result element should be rounded to 2 decimal places

::
	>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 1))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
	>>> print(matrix_divided([[10, 20, 30],[400, 500, 600]], 10))
	[[1.0, 2.0, 3.0], [40.0, 50.0, 60.0]]
