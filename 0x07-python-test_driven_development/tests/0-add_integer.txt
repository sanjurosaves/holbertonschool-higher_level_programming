Numbers
=======
``add_integer()`` returns the sum of two integers. it is the equivalent of using the `+` operator. default b value is 98.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5
	>>> add_integer(-2, -10)
	-12
	>>> add_integer(-999, 1000)
	1
	>>> add_integer(1.1, 9.9)
	10
	>>> add_integer(2)
	100

The function should not accept strings or non-number inputs.

::

	>>> add_integer(6, 'b')
	Traceback (most recent call last):
	TypeError: b must be an integer
	>>> add_integer('a', 'b')
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add_integer(-7, '+')
	Traceback (most recent call last):
	TypeError: b must be an integer
	>>> add_integer(float('inf'), 2)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
	>>> add_integer(-float('inf'), 2)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
	>>> add_integer(float('nan'), 222)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer


The function demands at least one input and not more than two inputs.
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
